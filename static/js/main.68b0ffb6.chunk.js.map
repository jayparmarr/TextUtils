{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","join","document","getElementById","select","navigator","clipboard","writeText","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","toogle","textContent","innerHTML","cancel","trim","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","message","App","setMode","_useState3","_useState4","setAlert","setTimeout","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"mMAIe,SAASA,EAAOC,GAC3B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kCAAAC,OAAoCL,EAAMM,KAAI,QAAAD,OAAOL,EAAMM,OACrEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAAKP,EAAMQ,OAC5CP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACxLb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAEpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BACzCd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAEVH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,KAAI,UAWpEN,EAAAC,EAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAA8C,UAAbL,EAAMM,KAAe,OAAO,UACvEL,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBa,QAASjB,EAAMkB,WAAYT,KAAK,WAAWM,GAAG,2BAClFd,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBe,QAAQ,0BAAyB,uBC3B9E,SAASC,EAASpB,GAC7B,IA+CAqB,EAAwBC,mBAAS,IAAGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA7BK,EAAIH,EAAA,GAAEI,EAAOJ,EAAA,GACpB,OACItB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KACI3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYyB,MAAO,CAAEC,MAAsB,SAAf9B,EAAMM,KAAkB,QAAU,UACzEL,EAAAC,EAAAC,cAAA,UAAKH,EAAM+B,SACX9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAAe4B,MAAON,EAAMO,SArBzC,SAACC,GACpBP,EAAQO,EAAMC,OAAOH,QAoBiEH,MAAO,CAAEO,gBAAgC,SAAfpC,EAAMM,KAAkB,QAAU,QAASwB,MAAsB,SAAf9B,EAAMM,KAAkB,QAAU,SAAWS,GAAG,QAAQsB,KAAK,OAEvNpC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBa,QAvD1B,WAClB,IAAIqB,EAAUZ,EAAKa,cACnBZ,EAAQW,GACRtC,EAAMwC,UAAU,yBAAyB,aAoD2B,wBAC5DvC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QAnD7B,WACpB,IAAIqB,EAAUZ,EAAKe,cACnBd,EAAQW,GACRtC,EAAMwC,UAAU,yBAAyB,aAgDkC,wBACnEvC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QA/ChC,SAACiB,GAClB,IAAII,EAAUZ,EAAKgB,MAAM,QACzBf,EAAQW,EAAQK,KAAK,MACrB3C,EAAMwC,UAAU,uBAAuB,aA4CiC,iBAChEvC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QAvB9B,SAACiB,GACpB,IAAIR,EAAOkB,SAASC,eAAe,SACnCnB,EAAKoB,SACLC,UAAUC,UAAUC,UAAUvB,EAAKM,OACnChC,EAAMwC,UAAU,sBAAsB,aAmBoC,aAClEvC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QA5CvC,WACV,IAAIiC,EAAM,IAAIC,yBACdD,EAAIxB,KAAOA,EACX0B,OAAOC,gBAAgBC,MAAMJ,GAC7B,IAAMK,EAASX,SAASC,eAAe,UACZ,aAAvBU,EAAOC,aACPD,EAAOE,UAAY,OACnBzD,EAAMwC,UAAU,qBAAqB,aAGrCe,EAAOE,UAAY,WACM,aAArBF,EAAOE,YACPL,OAAOC,gBAAgBK,SACvB1D,EAAMwC,UAAU,OAAO,cA+BkCzB,GAAG,UAAS,YACrEd,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QAnB5B,WAErBU,EADc,IAEd3B,EAAMwC,UAAU,eAAe,aAgB6C,eAOxEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiByB,MAAO,CAAEC,MAAsB,SAAf9B,EAAMM,KAAkB,QAAU,UAC9EL,EAAAC,EAAAC,cAAA,UAAI,gBACa,KAAhBuB,EAAKiC,OACF1D,EAAAC,EAAAC,cAAA,SAAG,mBAEHF,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KACI3B,EAAAC,EAAAC,cAAA,SAAIuB,EAAKgB,MAAM,KAAKkB,OAAO,cAAYlC,EAAKkC,OAAO,eACnD3D,EAAAC,EAAAC,cAAA,SAAI,KAAQuB,EAAKgB,MAAM,KAAKkB,OAAO,gCDnC3D7D,EAAO8D,aAAe,CAClBrD,MAAO,iBACPsD,UAAW,SE9BAC,MAZf,SAAe/D,GAKX,OACIA,EAAMgE,OAAS/D,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiBL,EAAMgE,MAAMvD,KAAI,gCAAgCwD,KAAK,SAC/FhE,EAAAC,EAAAC,cAAA,cANW,SAAC+D,GAChB,IAAMC,EAAQD,EAAKzB,cACnB,OAAO0B,EAAMC,OAAO,GAAG7B,cAAgB4B,EAAME,MAAM,GAItCC,CAAWtE,EAAMgE,MAAMvD,OAAe,KAAGT,EAAMgE,MAAMO,UC+C3DC,MA5Cf,WACE,IAAAnD,EAAwBC,mBAAS,SAAQC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAlCf,EAAIiB,EAAA,GAAEkD,EAAOlD,EAAA,GACpBmD,EAA0BpD,mBAAS,MAAKqD,EAAAnD,OAAAC,EAAA,EAAAD,CAAAkD,EAAA,GAAjCV,EAAKW,EAAA,GAAEC,EAAQD,EAAA,GAEhBnC,EAAY,SAAC+B,EAAS9D,GAC1BmE,EAAS,CACPL,QAASA,EACT9D,KAAMA,IAERoE,WAAW,WACTD,EAAS,OACR,OAcL,OACE3E,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KAII3B,EAAAC,EAAAC,cAACJ,EAAM,CAACS,MAAM,YAAYF,KAAMA,EAAMY,WAjBzB,WACJ,UAATZ,GACFmE,EAAQ,QACR7B,SAASkC,KAAKjD,MAAMO,gBAAkB,QACtCI,EAAU,6BAA8B,aAGxCiC,EAAQ,SACR7B,SAASkC,KAAKjD,MAAMO,gBAAkB,QACtCI,EAAU,8BAA+B,eASvCvC,EAAAC,EAAAC,cAAC4E,EAAK,CAACf,MAAOA,IACd/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAKbH,EAAAC,EAAAC,cAACiB,EAAQ,CAACoB,UAAWA,EAAWT,QAAQ,kCAAkCzB,KAAMA,OCrC3E0E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWlD,SAASC,eAAe,SACpDkD,OACH9F,EAAAC,EAAAC,cAACF,EAAAC,EAAM8F,WAAU,KACf/F,EAAAC,EAAAC,cAAC8F,EAAG,QAORjB","file":"static/js/main.68b0ffb6.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button cla\r\n                        ssName=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react'\r\n// import PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n// export default function Navbar(props) {\r\n//     return (\r\n//         <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n//             <div className=\"container-fluid\">\r\n//                 <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n//                 <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n//                     <span className=\"navbar-toggler-icon\"></span>\r\n//                 </button>\r\n//                 <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n//                     <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n//                         <li className=\"nav-item\">\r\n//                             <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n//                         </li>\r\n//                         <li className=\"nav-item\">\r\n//                             <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n//                         </li>\r\n//                     </ul>\r\n//                     {/* <form className=\"d-flex\">\r\n//                         <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n//                         <button cla\r\n//                         ssName=\"btn btn-primary\" type=\"submit\">Search</button>\r\n//                     </form> */}\r\n//                     <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n//                         <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n//                         <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         </nav>\r\n//     )\r\n// }\r\n\r\n// Navbar.propTypes = {\r\n//     title: PropTypes.string.isRequired,\r\n//     aboutText: PropTypes.string.isRequired\r\n// }\r\n\r\n// Navbar.defaultProps = {\r\n//     title: 'Set title here',\r\n//     aboutText: 'About'\r\n//   };","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\",\"success\");\r\n    }\r\n    const handleDownClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\",\"success\");\r\n    }\r\n    const handleSpaces = (event) => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed\",\"success\");\r\n    }\r\n    const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n        const toogle = document.getElementById('toggle')\r\n        if (toogle.textContent === \"Hear out\") {\r\n            toogle.innerHTML = \"Stop\"\r\n            props.showAlert(\"Hear out your text\",\"success\");\r\n        }\r\n        else {\r\n            toogle.innerHTML = \"Hear out\"\r\n            if (toogle.innerHTML === \"Hear out\") {\r\n                window.speechSynthesis.cancel()\r\n                props.showAlert(\"Stop\",\"success\");\r\n            }\r\n        }\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const handleCopyText = (event) => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard\",\"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Text Cleared\",\"success\");\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? 'black' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleDownClick}>Convert to Lovercase</button>\r\n                <button className=\"btn btn-primary mx-0\" onClick={handleSpaces}>Remove spaces</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopyText}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={speak} id=\"toggle\">Hear out</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n            </div>\r\n            {/* <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n                <h1>Text Summary</h1>\r\n                <p> {text.split(\" \").length} Words and {text.length} Characters</p>\r\n                <p> {0.008 * text.split(\" \").length} minutes required to read</p>\r\n            </div> */}\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h1>Text Summary</h1>\r\n                {text.trim() === '' ? (\r\n                    <p>No text entered</p>\r\n                ) : (\r\n                    <>\r\n                        <p>{text.split(\" \").length} Words and {text.length} Characters</p>\r\n                        <p>{0.008 * text.split(\" \").length} minutes required to read</p>\r\n                    </>\r\n                )}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'black';\n      showAlert(\"Dark mode has been enabled\", \"success\")\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\")\n    }\n  }\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\n      {/* <Navbar/> */}\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Routes> */}\n            {/* <Route exact path=\"/about\" element={<About/>}/> */}\n            {/* <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>} />    */}\n          {/* </Routes> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}